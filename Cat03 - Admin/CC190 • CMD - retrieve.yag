{{$args := parseArgs 2 "`-retrieve ‹Amount› ‹@UserOrID_1› ‹@UserOrID_2› ‹…› ‹@UserOrID_8›`" (carg "int" "value") (carg "userid" "UID1") (carg "userid" "UID2") (carg "userid" "UID3") (carg "userid" "UID4") (carg "userid" "UID5") (carg "userid" "UID6") (carg "userid" "UID7") (carg "userid" "UID8")}}
{{$Amt := $args.Get 0}}
{{$Fld := cslice}}
{{$Err := cslice}}
{{$Upd := false}}

{{$TaxMT3 := 20000}}
{{$TaxPM3 := 0.50}}
{{$TaxMT2 := 13000}}
{{$TaxPM2 := 0.35}}
{{$TaxMT1 := 7000}}
{{$TaxPM := 0.20}}

{{$UsrLst := cslice ($args.Get 1)}}
{{range (cslice 2 3 4 5 6 7 8)}} {{if $args.IsSet .}} {{$UsrLst = $UsrLst.Append ($args.Get .)}} {{end}} {{end}}

{{$TaxDB := dbGet 0 "Taxes"}}
{{$TaxSlice := $TaxDB.Value}}

{{- range $UsrLst}}
  {{- $IDS := toString .}}
  {{- $UNS := ""}}
  {{- if getMember .}} {{- $UNS = or (getMember .).User.Globalname (getMember .).User.Username}} {{- end}}

  {{- try}}
    {{- $nVal := toInt (dbIncr . "Points" $Amt)}}
    {{- $Fld = $Fld.Append (sdict "name" (or $UNS $IDS) "value" (reReplace "," (print "> ~~" (humanizeThousands (sub $nVal $Amt)) "~~ › **" (humanizeThousands $nVal) "**") " ") "inline" false)}}

    {{- if and (ge $nVal $TaxMT1) (getMember .)}}
      {{- if ge $nVal $TaxMT2}} {{- $TaxPM = $TaxPM2}}
      {{/* - else if ge $nVal $TaxMT3}} {{- $TaxPM = $TaxPM3 */}} {{- end}}
      {{- $TaxAmnt := toInt (mult (toFloat $nVal) $TaxPM)}}
      {{- if and $TaxDB (not (getMember .).User.Bot)}} {{- $Upd = true}} {{- if and ($TaxSlice.Get $IDS)}} {{- $TaxSlice.Set $IDS (cslice $TaxAmnt 0)}} {{- end}}
      {{- else if (not (getMember .).User.Bot)}} {{- $Upd = true}} {{- $TaxSlice = (sdict $IDS (cslice $TaxAmnt 0))}} {{- end}}
    {{- end}}
  {{- catch}} {{- $Err = $Err.Append (sdict "name" (print "**·** " (or $UNS $IDS)) "value" .Error "inline" false)}} {{- end}}
{{- end}}

{{$embed := cembed
  "color" 0x0080ff
  "title" (print "✓ Solde de Points mis à jour")
  "fields" $Fld
}}
{{$errEmbed := cembed "color" 0xda373c
  "title" "Des erreurs se sont produites :"
  "fields" $Err
}}

{{$toSend := cslice $embed}}
{{if ge (len $Err) 1}} {{$toSend = $toSend.Append $errEmbed}} {{end}}
{{sendMessage nil (complexMessage "embed" $toSend)}}

{{if $Upd}} {{dbSet 0 "Taxes" $TaxSlice}} {{end}}